// This code was autogenerated with `dbus-codegen-rust --crossroads`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus_crossroads as crossroads;

pub trait OrgMprisMediaPlayer2Player {
    fn next(&mut self) -> Result<(), dbus::MethodErr>;
    fn previous(&mut self) -> Result<(), dbus::MethodErr>;
    fn pause(&mut self) -> Result<(), dbus::MethodErr>;
    fn play_pause(&mut self) -> Result<(), dbus::MethodErr>;
    fn stop(&mut self) -> Result<(), dbus::MethodErr>;
    fn play(&mut self) -> Result<(), dbus::MethodErr>;
    fn seek(&mut self, offset: i64) -> Result<(), dbus::MethodErr>;
    fn set_position(&mut self, track_id: dbus::Path<'static>, position: i64) -> Result<(), dbus::MethodErr>;
    fn open_uri(&mut self, uri: String) -> Result<(), dbus::MethodErr>;
    fn playback_status(&self) -> Result<String, dbus::MethodErr>;
    fn loop_status(&self) -> Result<String, dbus::MethodErr>;
    fn set_loop_status(&self, value: String) -> Result<(), dbus::MethodErr>;
    fn rate(&self) -> Result<f64, dbus::MethodErr>;
    fn set_rate(&self, value: f64) -> Result<(), dbus::MethodErr>;
    fn shuffle(&self) -> Result<bool, dbus::MethodErr>;
    fn set_shuffle(&self, value: bool) -> Result<(), dbus::MethodErr>;
    fn metadata(&self) -> Result<arg::PropMap, dbus::MethodErr>;
    fn volume(&self) -> Result<f64, dbus::MethodErr>;
    fn set_volume(&self, value: f64) -> Result<(), dbus::MethodErr>;
    fn position(&self) -> Result<i64, dbus::MethodErr>;
    fn minimum_rate(&self) -> Result<f64, dbus::MethodErr>;
    fn maximum_rate(&self) -> Result<f64, dbus::MethodErr>;
    fn can_go_next(&self) -> Result<bool, dbus::MethodErr>;
    fn can_go_previous(&self) -> Result<bool, dbus::MethodErr>;
    fn can_play(&self) -> Result<bool, dbus::MethodErr>;
    fn can_pause(&self) -> Result<bool, dbus::MethodErr>;
    fn can_seek(&self) -> Result<bool, dbus::MethodErr>;
    fn can_control(&self) -> Result<bool, dbus::MethodErr>;
}

#[derive(Debug)]
pub struct OrgMprisMediaPlayer2PlayerSeeked {
    pub position: i64,
}

impl arg::AppendAll for OrgMprisMediaPlayer2PlayerSeeked {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.position, i);
    }
}

impl arg::ReadAll for OrgMprisMediaPlayer2PlayerSeeked {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgMprisMediaPlayer2PlayerSeeked {
            position: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgMprisMediaPlayer2PlayerSeeked {
    const NAME: &'static str = "Seeked";
    const INTERFACE: &'static str = "org.mpris.MediaPlayer2.Player";
}

pub fn register_org_mpris_media_player2_player<T>(cr: &mut crossroads::Crossroads) -> crossroads::IfaceToken<T>
where T: OrgMprisMediaPlayer2Player + Send + 'static
{
    cr.register("org.mpris.MediaPlayer2.Player", |b| {
        b.signal::<(i64,), _>("Seeked", ("Position",));
        b.method("Next", (), (), |_, t: &mut T, ()| {
            t.next()
        });
        b.method("Previous", (), (), |_, t: &mut T, ()| {
            t.previous()
        });
        b.method("Pause", (), (), |_, t: &mut T, ()| {
            t.pause()
        });
        b.method("PlayPause", (), (), |_, t: &mut T, ()| {
            t.play_pause()
        });
        b.method("Stop", (), (), |_, t: &mut T, ()| {
            t.stop()
        });
        b.method("Play", (), (), |_, t: &mut T, ()| {
            t.play()
        });
        b.method("Seek", ("Offset",), (), |_, t: &mut T, (offset,)| {
            t.seek(offset,)
        });
        b.method("SetPosition", ("TrackId","Position",), (), |_, t: &mut T, (track_id,position,)| {
            t.set_position(track_id,position,)
        });
        b.method("OpenUri", ("Uri",), (), |_, t: &mut T, (uri,)| {
            t.open_uri(uri,)
        });
        b.property::<String, _>("PlaybackStatus")
            .get(|_, t| t.playback_status())
            .annotate("org.freedesktop.DBus.Property.EmitsChangedSignal", "true");
        b.property::<String, _>("LoopStatus")
            .get(|_, t| t.loop_status())
            .set(|_, t, value| t.set_loop_status(value).map(|_| None))
            .annotate("org.mpris.MediaPlayer2.property.optional", "true")
            .annotate("org.freedesktop.DBus.Property.EmitsChangedSignal", "true");
        b.property::<f64, _>("Rate")
            .get(|_, t| t.rate())
            .set(|_, t, value| t.set_rate(value).map(|_| None))
            .annotate("org.freedesktop.DBus.Property.EmitsChangedSignal", "true");
        b.property::<bool, _>("Shuffle")
            .get(|_, t| t.shuffle())
            .set(|_, t, value| t.set_shuffle(value).map(|_| None))
            .annotate("org.freedesktop.DBus.Property.EmitsChangedSignal", "true")
            .annotate("org.mpris.MediaPlayer2.property.optional", "true");
        b.property::<arg::PropMap, _>("Metadata")
            .get(|_, t| t.metadata())
            .annotate("org.freedesktop.DBus.Property.EmitsChangedSignal", "true");
        b.property::<f64, _>("Volume")
            .get(|_, t| t.volume())
            .set(|_, t, value| t.set_volume(value).map(|_| None))
            .annotate("org.freedesktop.DBus.Property.EmitsChangedSignal", "true");
        b.property::<i64, _>("Position")
            .get(|_, t| t.position())
            .annotate("org.freedesktop.DBus.Property.EmitsChangedSignal", "false");
        b.property::<f64, _>("MinimumRate")
            .get(|_, t| t.minimum_rate())
            .annotate("org.freedesktop.DBus.Property.EmitsChangedSignal", "true");
        b.property::<f64, _>("MaximumRate")
            .get(|_, t| t.maximum_rate())
            .annotate("org.freedesktop.DBus.Property.EmitsChangedSignal", "true");
        b.property::<bool, _>("CanGoNext")
            .get(|_, t| t.can_go_next())
            .annotate("org.freedesktop.DBus.Property.EmitsChangedSignal", "true");
        b.property::<bool, _>("CanGoPrevious")
            .get(|_, t| t.can_go_previous())
            .annotate("org.freedesktop.DBus.Property.EmitsChangedSignal", "true");
        b.property::<bool, _>("CanPlay")
            .get(|_, t| t.can_play())
            .annotate("org.freedesktop.DBus.Property.EmitsChangedSignal", "true");
        b.property::<bool, _>("CanPause")
            .get(|_, t| t.can_pause())
            .annotate("org.freedesktop.DBus.Property.EmitsChangedSignal", "true");
        b.property::<bool, _>("CanSeek")
            .get(|_, t| t.can_seek())
            .annotate("org.freedesktop.DBus.Property.EmitsChangedSignal", "true");
        b.property::<bool, _>("CanControl")
            .get(|_, t| t.can_control())
            .annotate("org.freedesktop.DBus.Property.EmitsChangedSignal", "false");
    })
}
