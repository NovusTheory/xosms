// This code was autogenerated with `dbus-codegen-rust --crossroads`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus_crossroads as crossroads;

pub trait OrgMprisMediaPlayer2 {
    fn raise(&mut self) -> Result<(), dbus::MethodErr>;
    fn quit(&mut self) -> Result<(), dbus::MethodErr>;
    fn can_quit(&self) -> Result<bool, dbus::MethodErr>;
    fn fullscreen(&self) -> Result<bool, dbus::MethodErr>;
    fn set_fullscreen(&self, value: bool) -> Result<(), dbus::MethodErr>;
    fn can_set_fullscreen(&self) -> Result<bool, dbus::MethodErr>;
    fn can_raise(&self) -> Result<bool, dbus::MethodErr>;
    fn has_track_list(&self) -> Result<bool, dbus::MethodErr>;
    fn identity(&self) -> Result<String, dbus::MethodErr>;
    fn desktop_entry(&self) -> Result<String, dbus::MethodErr>;
    fn supported_uri_schemes(&self) -> Result<Vec<String>, dbus::MethodErr>;
    fn supported_mime_types(&self) -> Result<Vec<String>, dbus::MethodErr>;
}

pub fn register_org_mpris_media_player2<T>(cr: &mut crossroads::Crossroads) -> crossroads::IfaceToken<T>
where T: OrgMprisMediaPlayer2 + Send + 'static
{
    cr.register("org.mpris.MediaPlayer2", |b| {

        b.annotate("org.freedesktop.DBus.Property.EmitsChangedSignal", "true");
        b.method("Raise", (), (), |_, t: &mut T, ()| {
            t.raise()
        });
        b.method("Quit", (), (), |_, t: &mut T, ()| {
            t.quit()
        });
        b.property::<bool, _>("CanQuit")
            .get(|_, t| t.can_quit());
        b.property::<bool, _>("Fullscreen")
            .get(|_, t| t.fullscreen())
            .set(|_, t, value| t.set_fullscreen(value).map(|_| None))
            .annotate("org.mpris.MediaPlayer2.property.optional", "true");
        b.property::<bool, _>("CanSetFullscreen")
            .get(|_, t| t.can_set_fullscreen())
            .annotate("org.mpris.MediaPlayer2.property.optional", "true");
        b.property::<bool, _>("CanRaise")
            .get(|_, t| t.can_raise());
        b.property::<bool, _>("HasTrackList")
            .get(|_, t| t.has_track_list());
        b.property::<String, _>("Identity")
            .get(|_, t| t.identity());
        b.property::<String, _>("DesktopEntry")
            .get(|_, t| t.desktop_entry())
            .annotate("org.mpris.MediaPlayer2.property.optional", "true");
        b.property::<Vec<String>, _>("SupportedUriSchemes")
            .get(|_, t| t.supported_uri_schemes());
        b.property::<Vec<String>, _>("SupportedMimeTypes")
            .get(|_, t| t.supported_mime_types());
    })
}
